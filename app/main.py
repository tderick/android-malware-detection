import tempfile
import json
import pickle
import pandas as pd
from fastapi import FastAPI, File, UploadFile, HTTPException, Response
from pathlib import Path

from .feature_extractor import APKFeatureExtractor
    
app = FastAPI(
    title="Android Malware Detection",
    summary="Malware Detection API using Machine Learning",
    description="This API is used to detect malware in Android applications using Machine Learning. Users have to submit APK file and the API will return the result of the detection (Malware or Benign).",
    version="0.0.1",
)

base_dir = Path(__file__).resolve().parent
file_path = f"{base_dir}/model/"

# Load the model
loaded_model_xgboost = pickle.load(open(f"{file_path}xgboost_best_model.pkl", 'rb'))

def predict_status_of_app(input_data):
   input_df = pd.DataFrame([input_data])
   prediction = loaded_model_xgboost.predict(input_df)
   return prediction[0]

@app.post('/api/v1/android-malware-detection')
async def android_malware_detection(file: UploadFile = File(...)):
    
    if not file.filename.endswith(".apk"):
        raise HTTPException(status_code=400, detail="Only APK files are allowed")

      # Create a temporary file in memory
    with tempfile.NamedTemporaryFile(delete=False, suffix=".apk") as temp_file:
        # Write the content of the uploaded file to the temporary file
        content = await file.read()  # Read the file content from UploadFile
        temp_file.write(content)  # Write the content to the temporary file
        
        # Get the path of the temporary file
        temp_file_path = temp_file.name

    # Extract features from the APK file
    apk_features_extractor = APKFeatureExtractor(temp_file_path)

    features = apk_features_extractor.extract_features()
    app_name = apk_features_extractor.app_name
    package_name = apk_features_extractor.package_name
    version_name = apk_features_extractor.version_name
    version_code = apk_features_extractor.version_code
    app_features = apk_features_extractor.app_features

    # Predict the status of the app
    prediction = predict_status_of_app(features)
    if prediction == 0:
        status = "Benign"
    else:
        status = "Malware"
    
    
    rs = {
        "app_name": app_name,
        "package_name": package_name,
        "version_name": version_name,
        "version_code": version_code,
        "app_features":  ", ".join(f.split(".")[-1] for f in app_features),
        "status": status
    }

    rs_json = json.dumps(rs)
    return Response(content=rs_json,media_type="application/json")
    

